{"ast":null,"code":"var rotateLeft = function (matrix) {\n  var rows = matrix.length;\n  var columns = matrix[0].length;\n  var res = [];\n\n  for (var row = 0; row < rows; ++row) {\n    res.push([]);\n\n    for (var column = 0; column < columns; ++column) {\n      res[row][column] = matrix[column][columns - row - 1];\n    }\n  }\n\n  return res;\n};\n\nclass Tile {\n  constructor(value, row, column) {\n    this.value = value || 0;\n    this.row = row || -1;\n    this.column = column || -1;\n    this.oldRow = -1;\n    this.oldColumn = -1;\n    this.markForDeletion = false;\n    this.mergedInto = null;\n    this.id = this.id++ || 0;\n  }\n\n  moveTo(row, column) {\n    this.oldRow = this.row;\n    this.oldColumn = this.column;\n    this.row = row;\n    this.column = column;\n  }\n\n  isNew() {\n    return this.oldRow === -1 && !this.mergedInto;\n  }\n\n  hasMoved() {\n    return this.fromRow() !== -1 && (this.fromRow() !== this.toRow() || this.fromColumn() !== this.toColumn()) || this.mergedInto;\n  }\n\n  fromRow() {\n    return this.mergedInto ? this.row : this.oldRow;\n  }\n\n  fromColumn() {\n    return this.mergedInto ? this.column : this.oldColumn;\n  }\n\n  toRow() {\n    return this.mergedInto ? this.mergedInto.row : this.row;\n  }\n\n  toColumn() {\n    return this.mergedInto ? this.mergedInto.column : this.column;\n  }\n\n}\n\nclass Board {\n  constructor() {\n    this.tiles = [];\n    this.cells = [];\n    this.topScore = 0;\n    this.score = 0;\n    this.size = 4;\n    this.fourProbability = 0.1;\n    this.deltaX = [-1, 0, 1, 0];\n    this.deltaY = [0, -1, 0, 1];\n\n    for (var i = 0; i < this.size; ++i) {\n      this.cells[i] = [this.addTile(), this.addTile(), this.addTile(), this.addTile()];\n    }\n\n    this.fetchTopScore(); // 调用获取最高分数的方法\n\n    this.addRandomTile();\n    this.addRandomTile();\n    this.setPositions();\n    this.won = false;\n  }\n\n  async fetchTopScore() {\n    try {\n      //this.topScore = 10000;\n      const response = await fetch('http://localhost/2048/api/top-score.php'); // 发送GET请求到后端的API端点\n      //this.topScore = 10000;\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch top score');\n      } //this.topScore = 10000;\n\n\n      const data = await response.json();\n      this.topScore = data.topScore; // 更新最高分数\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  addTile(args) {\n    var res = new Tile(args);\n    this.tiles.push(res);\n    return res;\n  }\n\n  moveLeft() {\n    var hasChanged = false;\n\n    for (var row = 0; row < this.size; ++row) {\n      var currentRow = this.cells[row].filter(tile => tile.value !== 0);\n      var resultRow = [];\n\n      for (var target = 0; target < this.size; ++target) {\n        var targetTile = currentRow.length ? currentRow.shift() : this.addTile();\n\n        if (currentRow.length > 0 && currentRow[0].value === targetTile.value) {\n          var tile1 = targetTile;\n          targetTile = this.addTile(targetTile.value);\n          tile1.mergedInto = targetTile;\n          var tile2 = currentRow.shift();\n          tile2.mergedInto = targetTile;\n          targetTile.value += tile2.value;\n          this.score += tile1.value + tile2.value;\n        }\n\n        resultRow[target] = targetTile;\n        this.won |= targetTile.value === 2048;\n        hasChanged |= targetTile.value !== this.cells[row][target].value;\n      }\n\n      this.cells[row] = resultRow;\n    }\n\n    return hasChanged;\n  }\n\n  setPositions() {\n    this.cells.forEach((row, rowIndex) => {\n      row.forEach((tile, columnIndex) => {\n        tile.oldRow = tile.row;\n        tile.oldColumn = tile.column;\n        tile.row = rowIndex;\n        tile.column = columnIndex;\n        tile.markForDeletion = false;\n      });\n    });\n  }\n\n  addRandomTile() {\n    var emptyCells = [];\n\n    for (var r = 0; r < this.size; ++r) {\n      for (var c = 0; c < this.size; ++c) {\n        if (this.cells[r][c].value === 0) {\n          emptyCells.push({\n            r: r,\n            c: c\n          });\n        }\n      }\n    }\n\n    var index = ~~(Math.random() * emptyCells.length);\n    var cell = emptyCells[index];\n    var newValue = Math.random() < this.fourProbability ? 4 : 2;\n    this.cells[cell.r][cell.c] = this.addTile(newValue);\n  }\n\n  move(direction) {\n    // 0 -> left, 1 -> up, 2 -> right, 3 -> down\n    this.clearOldTiles();\n\n    for (var i = 0; i < direction; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n\n    var hasChanged = this.moveLeft();\n\n    for (let i = direction; i < 4; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n\n    if (hasChanged) {\n      this.addRandomTile();\n    }\n\n    this.setPositions();\n    return this;\n  }\n\n  clearOldTiles() {\n    this.tiles = this.tiles.filter(tile => tile.markForDeletion === false);\n    this.tiles.forEach(tile => {\n      tile.markForDeletion = true;\n    });\n  }\n\n  hasWon() {\n    return this.won;\n  }\n\n  hasLost() {\n    var canMove = false;\n\n    for (var row = 0; row < this.size; ++row) {\n      for (var column = 0; column < this.size; ++column) {\n        canMove |= this.cells[row][column].value === 0;\n\n        for (var dir = 0; dir < 4; ++dir) {\n          var newRow = row + this.deltaX[dir];\n          var newColumn = column + this.deltaY[dir];\n\n          if (newRow < 0 || newRow >= this.size || newColumn < 0 || newColumn >= this.size) {\n            continue;\n          }\n\n          canMove |= this.cells[row][column].value === this.cells[newRow][newColumn].value;\n        }\n      }\n    }\n\n    return !canMove;\n  }\n\n}\n\nexport { Board };","map":{"version":3,"names":["rotateLeft","matrix","rows","length","columns","res","row","push","column","Tile","constructor","value","oldRow","oldColumn","markForDeletion","mergedInto","id","moveTo","isNew","hasMoved","fromRow","toRow","fromColumn","toColumn","Board","tiles","cells","topScore","score","size","fourProbability","deltaX","deltaY","i","addTile","fetchTopScore","addRandomTile","setPositions","won","response","fetch","ok","Error","data","json","error","console","args","moveLeft","hasChanged","currentRow","filter","tile","resultRow","target","targetTile","shift","tile1","tile2","forEach","rowIndex","columnIndex","emptyCells","r","c","index","Math","random","cell","newValue","move","direction","clearOldTiles","hasWon","hasLost","canMove","dir","newRow","newColumn"],"sources":["/var/www/html/2048/src/helper/index.js"],"sourcesContent":["var rotateLeft = function (matrix) {\n  \n  var rows = matrix.length;\n  var columns = matrix[0].length;\n  var res = [];\n  for (var row = 0; row < rows; ++row) {\n    res.push([]);\n    for (var column = 0; column < columns; ++column) {\n      res[row][column] = matrix[column][columns - row - 1];\n    }\n  }\n  return res;\n};\n\nclass Tile {\n  constructor(value, row, column) {\n    this.value = value || 0;\n    this.row = row || -1;\n    this.column = column || -1;\n    this.oldRow = -1;\n    this.oldColumn = -1;\n    this.markForDeletion = false;\n    this.mergedInto = null;\n    this.id = this.id++ || 0;\n  }\n  moveTo(row, column) {\n    this.oldRow = this.row;\n    this.oldColumn = this.column;\n    this.row = row;\n    this.column = column;\n  }\n  isNew() {\n    return this.oldRow === -1 && !this.mergedInto;\n  }\n  hasMoved() {\n    return (\n      (this.fromRow() !== -1 &&\n        (this.fromRow() !== this.toRow() ||\n          this.fromColumn() !== this.toColumn())) ||\n      this.mergedInto\n    );\n  }\n  fromRow() {\n    return this.mergedInto ? this.row : this.oldRow;\n  }\n  fromColumn() {\n    return this.mergedInto ? this.column : this.oldColumn;\n  }\n  toRow() {\n    return this.mergedInto ? this.mergedInto.row : this.row;\n  }\n  toColumn() {\n    return this.mergedInto ? this.mergedInto.column : this.column;\n  }\n}\n\nclass Board {\n  constructor() {\n    this.tiles = [];\n    this.cells = [];\n    this.topScore = 0;\n    this.score = 0;\n    this.size = 4;\n    this.fourProbability = 0.1;\n    this.deltaX = [-1, 0, 1, 0];\n    this.deltaY = [0, -1, 0, 1];\n    for (var i = 0; i < this.size; ++i) {\n      this.cells[i] = [\n        this.addTile(),\n        this.addTile(),\n        this.addTile(),\n        this.addTile(),\n      ];\n    }\n    this.fetchTopScore(); // 调用获取最高分数的方法\n    this.addRandomTile();\n    this.addRandomTile();\n    this.setPositions();\n    this.won = false;\n  }\n\n\n\n  async fetchTopScore() {\n    try {\n      //this.topScore = 10000;\n      const response = await fetch('http://localhost/2048/api/top-score.php'); // 发送GET请求到后端的API端点\n      //this.topScore = 10000;\n      if (!response.ok) {\n        \n        throw new Error('Failed to fetch top score');\n      }\n      //this.topScore = 10000;\n      const data = await response.json();\n      this.topScore = data.topScore; // 更新最高分数\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  addTile(args) {\n    var res = new Tile(args);\n    this.tiles.push(res);\n    return res;\n  }\n\n  moveLeft() {\n    var hasChanged = false;\n    for (var row = 0; row < this.size; ++row) {\n      var currentRow = this.cells[row].filter((tile) => tile.value !== 0);\n      var resultRow = [];\n      for (var target = 0; target < this.size; ++target) {\n        var targetTile = currentRow.length\n          ? currentRow.shift()\n          : this.addTile();\n        if (currentRow.length > 0 && currentRow[0].value === targetTile.value) {\n          var tile1 = targetTile;\n          targetTile = this.addTile(targetTile.value);\n          tile1.mergedInto = targetTile;\n          var tile2 = currentRow.shift();\n          tile2.mergedInto = targetTile;\n          targetTile.value += tile2.value;\n          this.score += tile1.value + tile2.value;\n        }\n        resultRow[target] = targetTile;\n        this.won |= targetTile.value === 2048;\n        hasChanged |= targetTile.value !== this.cells[row][target].value;\n      }\n      this.cells[row] = resultRow;\n    }\n    return hasChanged;\n  }\n  setPositions() {\n    this.cells.forEach((row, rowIndex) => {\n      row.forEach((tile, columnIndex) => {\n        tile.oldRow = tile.row;\n        tile.oldColumn = tile.column;\n        tile.row = rowIndex;\n        tile.column = columnIndex;\n        tile.markForDeletion = false;\n      });\n    });\n  }\n  addRandomTile() {\n    var emptyCells = [];\n    for (var r = 0; r < this.size; ++r) {\n      for (var c = 0; c < this.size; ++c) {\n        if (this.cells[r][c].value === 0) {\n          emptyCells.push({ r: r, c: c });\n        }\n      }\n    }\n    var index = ~~(Math.random() * emptyCells.length);\n    var cell = emptyCells[index];\n    var newValue = Math.random() < this.fourProbability ? 4 : 2;\n    this.cells[cell.r][cell.c] = this.addTile(newValue);\n  }\n  move(direction) {\n    // 0 -> left, 1 -> up, 2 -> right, 3 -> down\n    this.clearOldTiles();\n    for (var i = 0; i < direction; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    var hasChanged = this.moveLeft();\n    for (let i = direction; i < 4; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    if (hasChanged) {\n      this.addRandomTile();\n    }\n    this.setPositions();\n    return this;\n  }\n  clearOldTiles() {\n    this.tiles = this.tiles.filter((tile) => tile.markForDeletion === false);\n    this.tiles.forEach((tile) => {\n      tile.markForDeletion = true;\n    });\n  }\n  hasWon() {\n    return this.won;\n  }\n  hasLost() {\n    var canMove = false;\n    for (var row = 0; row < this.size; ++row) {\n      for (var column = 0; column < this.size; ++column) {\n        canMove |= this.cells[row][column].value === 0;\n        for (var dir = 0; dir < 4; ++dir) {\n          var newRow = row + this.deltaX[dir];\n          var newColumn = column + this.deltaY[dir];\n          if (\n            newRow < 0 ||\n            newRow >= this.size ||\n            newColumn < 0 ||\n            newColumn >= this.size\n          ) {\n            continue;\n          }\n          canMove |=\n            this.cells[row][column].value ===\n            this.cells[newRow][newColumn].value;\n        }\n      }\n    }\n    return !canMove;\n  }\n}\n\nexport { Board };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}